macro(fetch_nodejs)

# NPM: https://gist.github.com/massahud/321a52f153e5d8f571be

set(T "NODEJS")
if(NOT NODEJS_FOUND)
	set(T___NAME "${T_${T}_NAME}")
	set(T___PATH ${T_${T}_PATH})
	set(T___DL_MD5 ${T_${T}_DL_MD5})
	set(T___DL_URI ${T_${T}_DL_URI})
	set(T___CK_FILE ${T___PATH}/${T_${T}_CK_FILE})

	if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
		set(T___DL_FILE ${T___PATH}/${T_${T}_DL_FILE})
		if(NOT EXISTS ${T___CK_FILE})
			if(NOT EXISTS ${T___DL_FILE})
				file(MAKE_DIRECTORY ${T___PATH})
				message("Downloading ${T___NAME} <${T___DL_URI}>...")
				file(DOWNLOAD ${T___DL_URI} ${T___DL_FILE} STATUS T___STATUS SHOW_PROGRESS EXPECTED_MD5 ${T___DL_MD5})
				list(GET T___STATUS 0 T___STATUS)
				if(T___STATUS)
					file(REMOVE ${T___DL_FILE})
					return()
				endif()
			endif()
		endif()

		# npm
		set(T___DL_MD5 "7cd8ba6f4582c81709b6705978b4b9ed")
		set(T___DL_URI "http://nodejs.org/dist/npm/npm-1.4.9.zip")
		set(T___CK_FILE ${T___PATH}/npm.cmd)
		set(T___DL_FILE ${BUILD_EXT_DIR}/npm-1.4.9.zip)
		if(NOT EXISTS ${T___CK_FILE})
			if(NOT EXISTS ${T___DL_FILE})
				message("Downloading ${T___NAME} <${T___DL_URI}>...")
				file(DOWNLOAD ${T___DL_URI} ${T___DL_FILE} STATUS T___STATUS SHOW_PROGRESS EXPECTED_MD5 ${T___DL_MD5})
				list(GET T___STATUS 0 T___STATUS)
				if(T___STATUS)
					file(REMOVE ${T___DL_FILE})
					return()
				endif()
			endif()
			do_unzip(${T___DL_FILE} ${T___PATH})
		endif()
		set(T___DL_MD5 "fc8f3985bcd1d92e323a7160973d8cc6")
		set(T___DL_URI "http://nodejs.org/dist/npm/npm-1.4.9.tgz")
		set(T___CK_FILE ${T___PATH}/npm)
		set(T___DL_FILE ${BUILD_EXT_DIR}/npm-1.4.9.tgz)
		file(MAKE_DIRECTORY ${T___PATH}/npm-cache)

		set(NODEJS ${T___PATH}/node.exe CACHE INTERNAL "")
		file(COPY ${T___PATH}/node_modules/npm/bin/npm DESTINATION ${T___PATH})
		set(NPM ${T___PATH}/npm CACHE INTERNAL "")

		execute_process(COMMAND CMD /c ${NPM} config set cache "${T_NODEJS_PATH}/npm-cache" --global WORKING_DIRECTORY ${T_NODEJS_PATH})
		execute_process(COMMAND CMD /c ${NPM} config set prefix "${T_NODEJS_PATH}" --global WORKING_DIRECTORY ${T_NODEJS_PATH})
		execute_process(COMMAND CMD /c ${NPM} config list WORKING_DIRECTORY ${T_NODEJS_PATH})
		execute_process(COMMAND CMD /c ${NPM} install npm WORKING_DIRECTORY ${T_NODEJS_PATH})

		set(NODEJS_FOUND 1 CACHE INTERNAL "")
	endif()

	if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
		set(T___DL_FILE ${BUILD_EXT_DIR}/${T_${T}_DL_FILE})
		set(T___DL_FOLDER ${BUILD_EXT_DIR}/${T_${T}_DL_FOLDER})
		if(NOT EXISTS ${T___CK_FILE})
			if(NOT EXISTS ${T___DL_FILE})
				message("Downloading ${T___NAME} <${T___DL_URI}>...")
				file(DOWNLOAD ${T___DL_URI} ${T___DL_FILE} STATUS T___STATUS SHOW_PROGRESS EXPECTED_MD5 ${T___DL_MD5})
				list(GET T___STATUS 0 T___STATUS)
				if(T___STATUS)
					file(REMOVE ${T___DL_FILE})
					return()
				endif()
			endif()

			execute_process(COMMAND tar xf ${T___DL_FILE} WORKING_DIRECTORY ${BUILD_EXT_DIR})
			execute_process(COMMAND cmake -E rename ${T___DL_FOLDER} ${T___PATH} WORKING_DIRECTORY ${BUILD_EXT_DIR})
		endif()

		set(NODEJS ${T___PATH}/bin/node CACHE INTERNAL "")
		set(NPM ${T___PATH}/bin/npm CACHE INTERNAL "")

		set(ENV{PATH} "${T_NODEJS_PATH}/bin:$ENV{PATH}")

		execute_process(COMMAND ${NPM} config set cache "${T_NODEJS_PATH}/npm-cache" --global WORKING_DIRECTORY ${T_NODEJS_PATH})
		execute_process(COMMAND ${NPM} config set prefix "${T_NODEJS_PATH}" --global WORKING_DIRECTORY ${T_NODEJS_PATH})
		execute_process(COMMAND ${NPM} config list WORKING_DIRECTORY ${T_NODEJS_PATH})
		execute_process(COMMAND ${NPM} install npm WORKING_DIRECTORY ${T_NODEJS_PATH})

		set(NODEJS_FOUND 1 CACHE INTERNAL "")
	endif()
endif()

# Add to path if not there
string(FIND "$ENV{PATH}" "${T_NODEJS_PATH}" NodeInPath)
if(NodeInPath EQUAL -1)
	set(ENV{PATH} "${T_NODEJS_PATH}/bin:$ENV{PATH}")
endif()

endmacro()
